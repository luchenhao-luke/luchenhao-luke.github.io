<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Langchain-Chatchat知识库接口代码详解</title>
      <link href="/2024/03/04/Langchain-Chatchat%E7%9F%A5%E8%AF%86%E5%BA%93%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/03/04/Langchain-Chatchat%E7%9F%A5%E8%AF%86%E5%BA%93%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/03/04/Langchain-Chatchat%E7%9F%A5%E8%AF%86%E5%BA%93%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/大模型-9533543.png" alt="大模型"></p><blockquote><p>本质上是在Langchain基础上封装的一层聊天服务，可以对接底层多种离线LLM和在线的LLM（也可以对接自定义的在线LLM）。提供基于<a href="https://so.csdn.net/so/search?q=知识库&amp;spm=1001.2101.3001.7020">知识库</a>聊天功能相关的一系列API。</p></blockquote><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>.<br>├── configs<br>│   ├── basic<em>config.py<br>│   ├── <strong>init</strong>.py<br>│   ├── kb<em>config.py<br>│   ├── model<em>config.py<br>│   ├── prompt<em>config.py<br>│   └── server<em>config.py<br>├── document<em>loaders<br>│   ├── FilteredCSVloader.py<br>│   ├── <strong>init</strong>.py<br>│   ├── mydocloader.py<br>│   ├── myimgloader.py<br>│   ├── mypdfloader.py<br>│   ├── mypptloader.py<br>│   ├── ocr.py<br>├── img<br>│   ├── chatchat<em>icon<em>blue<em>square<em>v2.png<br>│   ├── llm<em>application<em>icon.png<br>│   ├── logo-long-chatchat-trans-v2.png<br>│   └── logo.png<br>├── init<em>database.py<br>├── init<em>database.sh<br>├── knowledge<em>base<br>│   ├── info.db<br>│   ├── samples<br>│   │   ├── content<br>│   │   │   └── test.txt<br>│   │   └── vector<em>store<br>│   │       └── bge-large-zh<br>│   └── 政策知识库<br>│       ├── content<br>│       │   ├── 10.关于加快全域创新策源地建设推动.docx<br>│       └── vector<em>store<br>│           └── bge-large-zh<br>│               ├── index.faiss<br>│               └── index.pkl<br>├── main.py<br>├── README.md<br>├── requirements.txt<br>├── server<br>│   ├── api.py<br>│   ├── callback<em>handler<br>│   │   ├── conversation<em>callback<em>handler.py<br>│   ├── chat<br>│   │   ├── chat.py<br>│   │   ├── completion.py<br>│   │   ├── file<em>chat.py<br>│   │   ├── <strong>init</strong>.py<br>│   │   ├── knowledge<em>base<em>chat.py<br>│   │   └── utils.py<br>│   ├── db<br>│   │   ├── base.py<br>│   │   ├── <strong>init</strong>.py<br>│   │   ├── models<br>│   │   │   ├── conversation<em>model.py<br>│   │   │   ├── __init</em></em>.py<br>│   │   │   ├── knowledge_base_model.py<br>│   │   │   ├── knowledge_file_model.py<br>│   │   │   ├── knowledge_metadata_model.py<br>│   │   │   ├── message_model.py<br>│   │   ├── repository<br>│   │   │   ├── conversation_repository.py<br>│   │   │   ├── __init</em></em>.py<br>│   │   │   ├── knowledge_base_repository.py<br>│   │   │   ├── knowledge_file_repository.py<br>│   │   │   ├── knowledge_metadata_repository.py<br>│   │   │   ├── message_repository.py<br>│   │   └── session.py<br>│   ├── embeddings_api.py<br>│   ├── knowledge_base<br>│   │   ├── __init</em></em>.py<br>│   │   ├── kb_api.py<br>│   │   ├── kb_cache<br>│   │   │   ├── base.py<br>│   │   │   ├── faiss_cache.py<br>│   │   ├── kb_doc_api.py<br>│   │   ├── kb_service<br>│   │   │   ├── base.py<br>│   │   │   ├── default_kb_service.py<br>│   │   │   ├── es_kb_service.py<br>│   │   │   ├── faiss_kb_service.py<br>│   │   │   ├── __init</em></em>.py<br>│   │   │   ├── milvus_kb_service.py<br>│   │   │   ├── pg_kb_service.py<br>│   │   │   └── zilliz_kb_service.py<br>│   │   ├── kb_summary<br>│   │   │   ├── base.py<br>│   │   │   ├── __init</em></em>.py<br>│   │   │   └── summary_chunk.py<br>│   │   ├── kb_summary_api.py<br>│   │   ├── migrate.py<br>│   │   ├── model<br>│   │   │   ├── kb_document_model.py<br>│   │   └── utils.py<br>│   ├── llm_api.py<br>│   ├── memory<br>│   │   ├── conversation_db_buffer_memory.py<br>│   ├── model_workers<br>│   │   ├── azure.py<br>│   │   ├── base.py<br>│   │   ├── __init</em></em>.py<br>│   │   └── qwen.py<br>│   ├── reranker<br>│   │   └── reranker.py<br>│   ├── static<br>│   │   ├── favicon.png<br>│   │   ├── redoc.standalone.js<br>│   │   ├── swagger-ui-bundle.js<br>│   │   └── swagger-ui.css<br>│   └── utils.py<br>├── shutdown_all.sh<br>├── start.sh<br>├── start_webui.sh<br>├── tests<br>│   ├── api<br>│   │   ├── test_kb_api.py<br>│   │   ├── test_kb_api_request.py<br>│   │   ├── test_kb_summary_api.py<br>│   │   ├── test_llm_api.py<br>│   │   ├── test_server_state_api.py<br>│   │   ├── test_stream_chat_api.py<br>│   │   └── test_stream_chat_api_thread.py<br>│   ├── custom_splitter<br>│   │   └── test_different_splitter.py<br>│   ├── document_loader<br>│   │   ├── test_imgloader.py<br>│   │   └── test_pdfloader.py<br>│   ├── kb_vector_db<br>│   │   ├── __init</em></em>.py<br>│   │   ├── test_faiss_kb.py<br>│   │   ├── test_milvus_db.py<br>│   │   └── test_pg_db.py<br>│   ├── samples<br>│   │   ├── ocr_test.jpg<br>│   │   └── ocr_test.pdf<br>│   ├── test_migrate.py<br>│   └── test_online_api.py<br>├── text_splitter<br>│   ├── ali_text_splitter.py<br>│   ├── chinese_recursive_text_splitter.py<br>│   ├── chinese_text_splitter.py<br>│   ├── __init</em></em>.py<br>│   └── zh_title_enhance.py<br>├── webui_pages<br>│   ├── dialogue<br>│   │   ├── dialogue.py<br>│   │   ├── __init</em></em>.py<br>│   ├── __init</em></em>.py<br>│   ├── knowledge_base<br>│   │   ├── __init</em></em>.py<br>│   │   ├── knowledge_base.py<br>│   ├── model_config<br>│   │   ├── __init</em></em>.py<br>│   │   └── model_config.py<br>│   └── utils.py<br>└── webui.py</p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="/2024/03/04/Langchain-Chatchat%E7%9F%A5%E8%AF%86%E5%BA%93%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/大模型 (1" alt="大模型 (1)">.png)</p><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start_main_server: （主进程fork出7个子进程，每个模型起一个子进程model worker）</span><br><span class="line">-&gt; run_controller</span><br><span class="line">-&gt; run_model_worker</span><br><span class="line">-&gt; run_openai_api</span><br><span class="line">-&gt; run_api_server</span><br><span class="line">-&gt; run_webui</span><br><span class="line">————————————————</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="知识库对话"><a href="#知识库对话" class="headerlink" title="知识库对话"></a>知识库对话</h2><p>知识库对话功能的后端是在server/chat/knowledge_base_chat.py方法中实现的。</p><p>主要输入参数：</p><ul><li>query查询语句</li><li>knowledge_base_name知识库名称</li><li>top_k匹配向量数，即本地知识库召回</li><li>score_threshold知识库匹配相关度阈值，取值范围在0-1之间，SCORE越小，相关度越高，取到1相当于不筛选，建议设置在0.5左右</li><li>history历史对话记录</li><li>model_nameLLM 模型名称</li><li>local_doc_url是否返回原知识文件路径</li></ul><h2 id="异步编程基础"><a href="#异步编程基础" class="headerlink" title="异步编程基础"></a>异步编程基础</h2><ol><li><p>asynic很适合解决网络通讯的问题，因为网络通讯很多时间是花在等待上的，即io bound task（真正做任务的时间是很少的，都花在io通信等待上）</p></li><li><p>调用协程(async def)返回的是协程对象，协程中的代码不会运行</p><ol><li>await 也可以创建协程对象、可以注册task、可以在event loop里运行task</li><li>await要干的活太多了，我们把它创建协程对象并注册task的那一步给到create_task来做，这样就可以把所有的task都先注册完，再让event loop来自己选择什么时候空闲做什么task</li></ol></li><li>从syncio变到asyncio的入口是asyncio.run(coroutine),这步操作可以进入event loop模式，然后把协程变成task</li><li>gather也可以把coroutine变成task</li><li>coroutine不变成task是没有办法执行的</li><li>拿到返回值是需要用await的</li></ol><h2 id="私有化部署"><a href="#私有化部署" class="headerlink" title="私有化部署"></a>私有化部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CodexDive/LLMChat.git</span><br><span class="line">or</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:CodexDive/LLMChat.git</span><br><span class="line"></span><br><span class="line">docker login 10.101.12.128</span><br><span class="line"><span class="comment"># 机器：10.101.14.36</span></span><br><span class="line">docker pull 10.101.12.128/wxzhang/ragllm:v1.3</span><br><span class="line"></span><br><span class="line">docker run -itd --shm-size=32g --platform linux/amd64 -v /Users/luke/LLMChat:/root/LLMChat -p 28028:22 -p 28082:8080 -p 28086:8888 -p 28087:8077 -p 28068:8066 --name ragllm_luke 10.101.12.128/wxzhang/ragllm:v1.3 bash</span><br><span class="line"></span><br><span class="line">docker run -itd --shm-size=32g -v /home/luchenhao/workspace/LLMChat:/root/LLMChat -p 28028:22 -p 28082:8080 -p 28086:8888 -p 28087:8077 -p 28068:8066 --name ragllm_luke 10.101.12.128/wxzhang/ragllm:v1.3 bash</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it ragllm_luke bash</span><br><span class="line"></span><br><span class="line">conda activate ragllm</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/LLMChat</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">sh start.sh <span class="comment"># 一键启动</span></span><br><span class="line"><span class="comment">#sh start_webui.sh #启动ui</span></span><br></pre></td></tr></table></figure><h2 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h2><ul><li>调试信息包含系统环境、使用显卡、拉起子进程数量、加载模型、大模型参数缓存文件（checkpoint shards)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Langchain </tag>
            
            <tag> 大模型应用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/02/26/chatchat/"/>
      <url>/2024/02/26/chatchat/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -u root --name paddle_docker_jupyter -p 8080:8080 --gpus all -v $PWD:/paddle --network=host registry.baidubce.com/paddlepaddle/paddle:2.6.0-gpu-cuda12.0-cudnn8.9-trt8.6</span><br><span class="line"></span><br><span class="line">docker exec -it paddle_docker_jupyter /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">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</span><br></pre></td></tr></table></figure><h2 id="私有化部署"><a href="#私有化部署" class="headerlink" title="私有化部署"></a>私有化部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/CodexDive/LLMChat.git</span><br><span class="line">or</span><br><span class="line">git clone git@github.com:CodexDive/LLMChat.git</span><br><span class="line"></span><br><span class="line">docker login 10.101.12.128</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">机器：10.101.14.36</span></span><br><span class="line">docker pull 10.101.12.128/wxzhang/ragllm:v1.3</span><br><span class="line"></span><br><span class="line">docker run -itd --shm-size=32g --platform linux/amd64 -v /Users/luke/LLMChat:/root/LLMChat -p 28028:22 -p 28082:8080 -p 28086:8888 -p 28087:8077 -p 28068:8066 --name ragllm_luke 10.101.12.128/wxzhang/ragllm:v1.3 bash</span><br><span class="line"></span><br><span class="line">docker run -itd --shm-size=32g -v /home/luchenhao/workspace/LLMChat:/root/LLMChat -p 28028:22 -p 28082:8080 -p 28086:8888 -p 28087:8077 -p 28068:8066 --name ragllm_luke 10.101.12.128/wxzhang/ragllm:v1.3 bash</span><br><span class="line"></span><br><span class="line">docker exec -it ragllm_luke bash</span><br><span class="line"></span><br><span class="line">conda activate ragllm</span><br><span class="line"></span><br><span class="line">cd /root/LLMChat</span><br><span class="line"></span><br><span class="line">sh start.sh # 一键启动</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sh start_webui.sh <span class="comment">#启动ui</span></span></span><br></pre></td></tr></table></figure><h2 id="服务器代理设置的一些命令（没成功）"><a href="#服务器代理设置的一些命令（没成功）" class="headerlink" title="服务器代理设置的一些命令（没成功）"></a>服务器代理设置的一些命令（没成功）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">alias proxy=&#x27;export https_proxy=http://10.11.13.29:7890 http_proxy=http://10.11.13.29:7890 all_proxy=socks5://10.11.13.29:7890&#x27;</span><br><span class="line">alias unproxy=&#x27;unset all_proxy http_proxy https_proxy&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置代理</span></span><br><span class="line">git config --global http.proxy http://192.168.64.1:7890</span><br><span class="line">git config --global https.proxy https://192.168.64.1:7890</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置取消代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br><span class="line">nc -vz -w 2 10.11.13.29 7890</span><br><span class="line">telnet 10.11.13.29 7890</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">指定只允许特定 IP 访问端口</span></span><br><span class="line">pass in on en0 proto tcp from 192.168.1.2 to any port 7890</span><br><span class="line">pass out proto tcp from any to any port 7890</span><br><span class="line">sudo pfctl -f /etc/pf.conf</span><br><span class="line">sudo pfctl -e</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp /Users/luke/Downloads/logo/logo.png luchenhao@10.101.14.36:/home/luchenhao/workspace/LLMChat/img</span><br><span class="line"></span><br><span class="line">cp /mnt/nas_self-define/luchenhao/bge-large-zh/pytorch_model.bin ./</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pip install python-multipart</span><br><span class="line">  481  sh init_database.sh</span><br><span class="line">  482  sh start.sh</span><br><span class="line">  483  sh init_database.sh</span><br><span class="line">  484  sh start.sh</span><br><span class="line">  485  cd /root/LLMChat</span><br><span class="line">  486  sh start.sh</span><br><span class="line">  487  pip install sentence_transformers</span><br><span class="line">  488  sh start.sh</span><br><span class="line">  489  pip install faiss-gpu</span><br><span class="line">  490  sh start.sh</span><br><span class="line">  491  cd /root/LLMChat</span><br><span class="line">  492  pip install unstructured[all-docs]==0.11.0</span><br><span class="line">  493  pip install langchain==0.0.354</span><br><span class="line">  494  pip install langchain-experimental==0.0.47</span><br><span class="line">  495  cd /root/LLMChat</span><br><span class="line">  496  sh start.sh</span><br><span class="line">  497  pip install --upgrade langchain</span><br><span class="line">  498  python</span><br><span class="line">  499  pip install --upgrade langchain</span><br><span class="line">  500  sh start.sh</span><br><span class="line">  501  ll</span><br><span class="line">  502  pip install -r requirements.txt</span><br><span class="line">  503  conda install faiss-gpu -c conda-forge</span><br><span class="line">  504  sh start.sh</span><br><span class="line">  505  pip install -r requirements.txt</span><br><span class="line">  506  cd /root/LLMChat</span><br><span class="line">  507  pip install -r requirements.txt</span><br><span class="line">  508  ll</span><br><span class="line">  509  sh start.sh</span><br><span class="line">  510  pip install fitz</span><br><span class="line">  511  sh start.sh</span><br><span class="line">  512  pip uninstall fitz</span><br><span class="line">  513  pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大模型流程构建工具调研</title>
      <link href="/2024/01/25/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%B5%81%E7%A8%8B%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/"/>
      <url>/2024/01/25/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%B5%81%E7%A8%8B%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h3 id="通用大模型"><a href="#通用大模型" class="headerlink" title="通用大模型"></a>通用大模型</h3><h3 id="垂直大模型"><a href="#垂直大模型" class="headerlink" title="垂直大模型"></a>垂直大模型</h3><ul><li>在通用大模型基础上，结合自身行业数据进行微调，可能带有外挂知识库</li><li>结合特定行业的数据改变数据的分布，重新进行预训练，直接打造行业大模型</li><li>(文本，专属预言)pair对大模型进行微调，完成<strong>【用户输入 – 大模型 – 专属语言输出 – 自有 AI 模型 – 业务结果输出】的全过程</strong></li></ul><blockquote><p>什么样的问题必须依靠大模型的能力？</p></blockquote><p><strong>要用大模型，就必须关注到业务场景中是否有非结构化的数据需要处理</strong>。</p><h2 id="通义千问"><a href="#通义千问" class="headerlink" title="通义千问"></a>通义千问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install dashscope --upgrade</span><br></pre></td></tr></table></figure><h2 id="ChatGLM-LangChain"><a href="#ChatGLM-LangChain" class="headerlink" title="ChatGLM + LangChain"></a>ChatGLM + LangChain</h2><ol><li><p>ChatGLM-6B</p><ul><li>自我认知能力</li><li>提纲写作能力</li><li>文案写作能力</li><li>信息抽取能力</li></ul></li><li><p>ChatGLM-6B应用：大语言模型基于通识知识进行训练，在面对实际场景时，需要借助模型微调或提示词工程提升语言模型应用效果，具体包括a.垂直领域知识 b.基于私有数据的问答</p></li></ol><div class="table-container"><table><thead><tr><th></th><th>是什么</th><th>使用场景</th></tr></thead><tbody><tr><td>微调/精调</td><td>针对预先训练的语言模型，在特定任务的少量数据集上对其进行进一步训练</td><td>当任务或域定义明确，并且有足够的标记数据可供训练时，通常使用微调过程。</td></tr><tr><td>提示词工程</td><td>涉及设计自然语言提示或指令，可以指导语言模型执行特定任务</td><td>最适合需要高精度和明确输出的任务。提示工程可用于制作引发所需输出的查询。</td></tr></tbody></table></div><ul><li>langchain-chatchat本身就是基于提示词工程的应用</li></ul><ol><li><p>LangChain：是一个用于开发由语言模型驱动的应用程序的框架</p><ul><li>功能模块：<ul><li>Modules：支持的模型类型和集成</li><li>Prompt：提示词管理、优化和序列化</li><li>Memory：内存是指在链/代理调用之间持续存在的状态</li><li>Indexes：当语言模型与特定于应用程序的数据相结合时，会变得更加强大-此模块包含用于加载、查询和更新外部数据的接口和集成</li><li>Chain：链是结构化的调用序列</li><li>Agents：代理是一个链，其中LLM在给定高级指令和一组工具的情况下，反复决定操作，执行操作并观察结果，直到高级指令完成</li><li>Callbacks：回调允许您记录和流式传输任何链的中间步骤，从而轻松观察、调试和评估应用程序的内部</li></ul></li><li>应用场景：文档问答、个人助理、查询表格数据、与API交互(newbing)、信息提取、文档总结</li></ul></li><li><p>基于单一文档问答的实现原理</p><p><img src="/2024/01/25/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%B5%81%E7%A8%8B%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/截屏2024-01-25 15.21.51.png" alt="截屏2024-01-25 15.21.51"></p></li><li><p>LangChain早期项目的流程原理图</p><p><img src="/2024/01/25/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%B5%81%E7%A8%8B%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/v2-c8bde0f196644089b53667994021bbcb_r.jpg" alt="img"></p><p>a) 简单来说就是把本地的一些文档( doc txt md csv json …) 先通过一系列处理（ 读取 分词 ）embedding模型编码成一定数量的高维向量 <strong>（图中 1到6）</strong></p><p>b) 而用户原本直接和LLM对话的文本 也会通过embedding 模型编码成高维向量 <strong>（图中 8 9）</strong></p><p>c) 然后通过计算<strong>余弦相似度</strong>的方式 （<strong>图中10和7）</strong> 来检索本地文档库中可能提供帮助的相关资料</p><p>d) 再和原用户的问题文本 结合 （<strong>图中11）</strong></p><p>e) 经过预先我们准备好的提示词模板 Prompt Template 组装成最后的 Prompt 提示词 （<strong>图中12 13）</strong></p><p>f) 去问LLM （<strong>图中14 15）</strong></p><p><strong><u>代码实现</u></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动模型</span></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModel</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(<span class="string">&quot;THUDM/chatglm-6b&quot;</span>, trust_remote_code=<span class="literal">True</span>)</span><br><span class="line">model = AutoModel.from_pretrained(<span class="string">&quot;THUDM/chatglm-6b&quot;</span>, trust_remote_code=<span class="literal">True</span>).half().cuda()</span><br><span class="line">chatglm = model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> UnstructuredFileLoader</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain.embeddings.openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件路径</span></span><br><span class="line">filepath = <span class="string">&quot;test.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载文件</span></span><br><span class="line">loader = UnstructuredFileLoader(filepath)</span><br><span class="line">docs = loader.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本分割</span></span><br><span class="line">text_splitter = CharacterTextSplitter(chunk_size=<span class="number">500</span>, chunk_overlap=<span class="number">200</span>)</span><br><span class="line">docs = text_splitter.split_text(docs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建向量库</span></span><br><span class="line">embeddings = OpenAIEmbeddings()</span><br><span class="line">vector_store = FAISS.from_documents(docs, embeddings)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据提问匹配上下文</span></span><br><span class="line">query = <span class="string">&quot;Langchain能够接入哪些数据类型？&quot;</span></span><br><span class="line">docs = vector_store.similarity_search(query)</span><br><span class="line">context = [doc.page_content <span class="keyword">for</span> doc <span class="keyword">in</span> docs]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造Prompt</span></span><br><span class="line">prompt = <span class="string">f&quot;已知信息: \n<span class="subst">&#123;context&#125;</span>\n根据已知信息回答问题：\n<span class="subst">&#123;query&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># llm生成回答</span></span><br><span class="line">chatglm.chat(tokenizer, prompt, history=&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>LangChain + ChatGLM</p><p><strong><em>针对langchain改进的点：</em></strong></p><ul><li>除了openai外可适配更多的开源模型</li><li>相比于langchain的document_loader可适配更多的数据源</li><li>在分句、文档读取等方面，针对中文使用场景进行了优化</li></ul><p><strong><em>具体模块体现在：</em></strong></p><ul><li>models：llm的接口类与实现类，原本langchain只支持chatgpt的流式输出，chatchat增加了对很多开源模型的流式输出支持</li><li>loader：文档加载器的实现类，预置了更多pdf_loaders，对中文的支持更好</li><li>Textsplitter: 文本切分的实现类，对中文的切分更好</li><li>chains：工作链路实现（后续会增加库表、知识图谱等chain），目前基于chains/local_doc_qa实现基于本地文档的问答实现</li><li>content：用于存储上传的原始文件，对原始信息的准确度匹配性检查</li><li>vector_store: 用于存储向量库文件，包括.index文件等，即本地知识库本体</li><li>configs：存储文件配置项信息</li></ul></li><li><p>做本地知识库的时候，值得优化的方向</p><ul><li>对llm使用整理好的具有明确标记的问答来进行微调</li><li>对通用领域的embedding模型进行基于专业领域数据的再训练</li><li>文档加工：1）文本分段重排 2）文档加工，在文本分段后，对每段分别进行总结，基于总结内容语义进行匹配</li><li>借助不同模型能力，数据库接入、知识图谱接入等场景可利用text2sql或text2cpyher等模型，再把结果给到语言模型来生成最终的回答</li></ul></li></ol><h2 id="LlamaIndex"><a href="#LlamaIndex" class="headerlink" title="LlamaIndex"></a>LlamaIndex</h2><blockquote><p><code>LlamaIndex</code> 是一个用于 <code>LLM</code> 应用程序的数据框架，用于注入，结构化，并访问私有或特定领域数据。</p></blockquote><ul><li>LlamaIndex的目的是使用私有或特定领域数据来增强这些模型。这些数据可能分布在不同的应用程序和数据存储中。它们可能存在于API之后、SQL数据库中，或者存在在PDF文件以及幻灯片中。</li></ul><h2 id="大模型生态"><a href="#大模型生态" class="headerlink" title="大模型生态"></a>大模型生态</h2><p><img src="/2024/01/25/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%B5%81%E7%A8%8B%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/v2-c2720036906e2fb9c00850c75309dbd8_r.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型应用 </tag>
            
            <tag> LangChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo和Butterfly搭建个人博客</title>
      <link href="/2024/01/16/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CButterfly%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/01/16/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CButterfly%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>创建一篇博客：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo new <span class="string">&quot;我的第一篇博客&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>本地部署：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li><li><p>远端部署：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo g &amp;&amp; sudo hexo d</span><br></pre></td></tr></table></figure></li><li><p>清理文件夹缓存：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo clean</span><br></pre></td></tr></table></figure></li></ol><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><p><img src="/2024/01/16/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CButterfly%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/截屏2024-01-26 09.59.42.png" alt="截屏2024-01-26 09.59.42"></p></li></ol><p>The ssh key doesn’t add to cmd environment.Using ssh-add to add the key.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://yushuaigee.gitee.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%B8%80">从零开始免费搭建自己的博客(一)——本地搭建hexo框架</a>%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/)</li><li><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔</a></li><li><a href="https://blog.51cto.com/u_15127636/3257851">Butterfly美化</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGLM-6B推理</title>
      <link href="/2023/12/26/ChatGLM-6B%E6%8E%A8%E7%90%86/"/>
      <url>/2023/12/26/ChatGLM-6B%E6%8E%A8%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ssh luchenhao@10.101.14.36</span><br><span class="line">$ passwd <span class="comment">#设置密码</span></span><br><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa.pub luchenhao@10.101.14.36 <span class="comment">#配置免密登录，本机传服务器</span></span><br><span class="line"><span class="comment">#修改~/.ssh/config文件</span></span><br><span class="line">$ vi ~/.ssh/config</span><br><span class="line">```</span><br><span class="line">Host 10.199.160.252</span><br><span class="line">  HostName 10.199.160.252</span><br><span class="line">  User song</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  IdentityFile /Users/adenialzz/.ssh/id_rsa</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/docker/docker-container-usage.html">docker命令</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -itd -u root --name chatglm2-6b --gpus all 10.101.12.128/wxzhang/modelscope:ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0-1.10.0_final</span><br><span class="line">docker exec -it a3e9 /bin/bash</span><br><span class="line">pip install protobuf transformers==4.30.2 cpm_kernels torch&gt;=2.0 gradio mdtex2html sentencepiece accelerate</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/mnt/nas_self-define/luchenhao/test</span><br><span class="line">mount -t nfs -o vers=3,nolock unifs-std-nas225.alkaidos.cn:/mnt/storctl-nfs/unifs-h001/dros/DROS/users/1723876407693508609/vol-7403253828236464128 /mnt/nas_self-define/luchenhao/LLMs</span><br><span class="line"></span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/pytorch_model-00001-of-00007.bin&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/pytorch_model-00002-of-00007.bin&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/pytorch_model-00003-of-00007.bin&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/pytorch_model-00004-of-00007.bin&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/pytorch_model-00005-of-00007.bin&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/pytorch_model-00006-of-00007.bin&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/pytorch_model-00007-of-00007.bin&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/tokenizer.model&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br><span class="line">scp &#x27;/Users/luke/Downloads/ChatGLM2-6B/MODEL_LICENSE&#x27; luchenhao@10.101.14.36:/mnt/public_model/ChatGLM2-6B/1/chatglm2-6b</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#退出容器</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">#停止当前运行的容器</span><br><span class="line">docker stop $CONTAINER_ID</span><br><span class="line"></span><br><span class="line"># docker commit [CONTAINER_ID] [image_name:tag]</span><br><span class="line">docker commit a3e95b4d0754 luchenhao/ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0-chatglm2_6b:v1</span><br><span class="line"></span><br><span class="line">docker run -itd -u root --name chatglm2-6b-v1 --gpus all -v /mnt/public_model/ChatGLM2-6B:/home/ChatGLM2-6B luchenhao/ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0-chatglm2_6b:v1</span><br><span class="line"></span><br><span class="line">docker exec -it chatglm2-6b-v1 /bin/bash</span><br><span class="line"></span><br><span class="line">docker login 10.101.12.128</span><br><span class="line"></span><br><span class="line">docker tag luchenhao/ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0-chatglm3_6b:v1 10.101.12.128/llm/chatglm3_6b:ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0</span><br><span class="line"></span><br><span class="line">docker push 10.101.12.128/llm/chatglm3_6b:ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -u root --name chatglm3-6b --gpus all 10.101.12.128/llm/chatglm2_6b:ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0</span><br><span class="line">docker exec -it chatglm3-6b /bin/bash</span><br><span class="line">docker stop 37dceac07b9a</span><br><span class="line">docker commit 37dceac07b9a luchenhao/ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0-chatglm3_6b:v1</span><br><span class="line">docker run -itd -u root --name chatglm3-6b-v1 --gpus all -v /mnt/public_model/ChatGLM3-6B:/home/ChatGLM3-6B luchenhao/ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0-chatglm3_6b:v1</span><br><span class="line">docker exec -it chatglm3-6b-v1 /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -u root --name llama2-13b --gpus all -v /mnt/public_model/Llama-2-13b-chat-ms:/home/Llama-2-13b-chat-ms 10.101.12.128/llm/chatglm3_6b:ubuntu22.04-cuda11.8.0-py310-torch2.1.0-tf2.14.0</span><br><span class="line">docker exec -it llama2-13b /bin/bash</span><br></pre></td></tr></table></figure><h2 id="推理测评"><a href="#推理测评" class="headerlink" title="推理测评"></a>推理测评</h2>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GLM预训练</title>
      <link href="/2023/12/14/GLM%E9%A2%84%E8%AE%AD%E7%BB%83/"/>
      <url>/2023/12/14/GLM%E9%A2%84%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1 id="GLM-7B预训练过程"><a href="#GLM-7B预训练过程" class="headerlink" title="GLM-7B预训练过程"></a>GLM-7B预训练过程</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@10.106.86.1 -p 31631 (pass:yangfei@2023)</span><br><span class="line">$ <span class="built_in">cat</span> /etc/mpi/hostfile</span><br><span class="line">$ ssh yangfei-science-computer-app-worker-0.yangfei-science-computer-app</span><br><span class="line">$ <span class="built_in">cd</span> /mnt/nas/1/GLM-main</span><br></pre></td></tr></table></figure><h2 id="准备hostfile"><a href="#准备hostfile" class="headerlink" title="准备hostfile"></a>准备hostfile</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi hostfile</span><br><span class="line">yangfei-science-computer-app-master-0.yangfei-science-computer-app slots=8</span><br><span class="line">yangfei-science-computer-app-worker-0.yangfei-science-computer-app slots=8</span><br><span class="line">yangfei-science-computer-app-worker-1.yangfei-science-computer-app slots=8</span><br><span class="line">yangfei-science-computer-app-worker-2.yangfei-science-computer-app slots=8</span><br></pre></td></tr></table></figure><h2 id="相关辅助工具库安装"><a href="#相关辅助工具库安装" class="headerlink" title="相关辅助工具库安装"></a>相关辅助工具库安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install sentencepiece</span><br><span class="line">$ yum install pdsh</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol><li><p><code>scripts/ds_pretrain_nvidia.sh</code></p><p> 脚本 scripts/ds_pretrain_nvidia.sh 会启动 DeepSpeed 训练程序。应将 NUM_WORKERS 和 NUM_GPUS_PER_WORKER 更改为 Worker 数量和每个 Worker 的 GPU 数量。还应将 HOST_FILE_PATH 改为 OpenMPI 风格主机文件的路径。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Change <span class="keyword">for</span> multinode config</span></span><br><span class="line"></span><br><span class="line">NUM_WORKERS=1</span><br><span class="line">NUM_GPUS_PER_WORKER=8</span><br><span class="line">MP_SIZE=8 #模型并行参数</span><br><span class="line">MASTER_PORT=$(shuf -n 1 -i 10000-65535)</span><br><span class="line"></span><br><span class="line">source $1</span><br><span class="line">DATESTR=$(date +&quot;%m-%d-%H-%M&quot;)</span><br><span class="line"></span><br><span class="line">OPTIONS_NCCL=&quot;NCCL_DEBUG=info NCCL_IB_DISABLE=0 NCCL_NET_GDR_LEVEL=2&quot;</span><br><span class="line">HOST_FILE_PATH=&quot;/mnt/nas/1/GLM-main/hostfile&quot;</span><br><span class="line"></span><br><span class="line">mkdir logs</span><br><span class="line">run_cmd=&quot;$&#123;OPTIONS_NCCL&#125; deepspeed --master_port $&#123;MASTER_PORT&#125; --num_nodes $&#123;NUM_WORKERS&#125; --num_gpus $&#123;NUM_GPUS_PER_WORKER&#125; --hostfile $&#123;HOST_FILE_PATH&#125; pretrain_glm.py $&#123;gpt_options&#125; 2&gt;&amp;1 | tee logs/log-$&#123;DATESTR&#125;.txt&quot;</span><br><span class="line">echo $&#123;run_cmd&#125;</span><br><span class="line">eval $&#123;run_cmd&#125;</span><br><span class="line"></span><br><span class="line">set +x</span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>config/ds_block_10B.sh</code></p><p> 文件 config/ds_block_large.sh 定义了用于预训练的超参数。大部分参数不言自明。具体来说，—train-data 可以是 data_utils/corpora.py 中 NAMED_CORPORA 中定义的多个关键字。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">script_path=$(realpath $BASH_SOURCE)</span><br><span class="line">script_dir=$(dirname $script_path)</span><br><span class="line"></span><br><span class="line">config_json=&quot;$script_dir/config_block_large.json&quot;</span><br><span class="line">gpt_options=&quot; \</span><br><span class="line">       --block-lm \</span><br><span class="line">       --bert-prob 1.0 \</span><br><span class="line">       --avg-block-length 3 \</span><br><span class="line">       --experiment-name blocklm-large-blank \</span><br><span class="line">       --model-parallel-size $&#123;MP_SIZE&#125; \</span><br><span class="line">       --num-layers 28 \</span><br><span class="line">       --hidden-size 4096 \</span><br><span class="line">       --num-attention-heads 32 \</span><br><span class="line">       --seq-length 2048 \</span><br><span class="line">       --max-position-embeddings 2048 \</span><br><span class="line">       --save /root/data/checkpoints \</span><br><span class="line">       --train-iters 200000 \</span><br><span class="line">       --resume-dataloader \</span><br><span class="line">       --train-data gpt \</span><br><span class="line">       --tokenizer-type BertWordPieceTokenizer \</span><br><span class="line">       --tokenizer-model-type bert-large-uncased \</span><br><span class="line">       --split 949,50,1 \</span><br><span class="line">       --distributed-backend nccl \</span><br><span class="line">       --lr-decay-style cosine \</span><br><span class="line">       --lr-decay-iters 160000 \</span><br><span class="line">       --lr-decay-ratio 0.05 \</span><br><span class="line">       --warmup .05 \</span><br><span class="line">       --checkpoint-activations \</span><br><span class="line">       --deepspeed-activation-checkpointing \</span><br><span class="line">       --log-interval 1 \</span><br><span class="line">       --fp16 \</span><br><span class="line">&quot;</span><br><span class="line">gpt_options=&quot;$&#123;gpt_options&#125;</span><br><span class="line">               --deepspeed \</span><br><span class="line">               --deepspeed_config $&#123;config_json&#125; \</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>config/config_block_10B.json</code>: DeepSpeed Configuration JSON，优化器的超参数定义</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;train_micro_batch_size_per_gpu&quot;: 4, #batch-size</span><br><span class="line">  &quot;gradient_accumulation_steps&quot;: 1,</span><br><span class="line">  &quot;steps_per_print&quot;: 100,</span><br><span class="line">  &quot;gradient_clipping&quot;: 1.0,</span><br><span class="line">  &quot;fp16&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;loss_scale&quot;: 0,</span><br><span class="line">    &quot;loss_scale_window&quot;: 1000,</span><br><span class="line">    &quot;hysteresis&quot;: 2,</span><br><span class="line">    &quot;min_loss_scale&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;optimizer&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;Adam&quot;,</span><br><span class="line">    &quot;params&quot;: &#123;</span><br><span class="line">      &quot;lr&quot;: 0.0002,</span><br><span class="line">      &quot;weight_decay&quot;: 0.1,</span><br><span class="line">      &quot;betas&quot;: [</span><br><span class="line">        0.9,</span><br><span class="line">        0.98</span><br><span class="line">      ],</span><br><span class="line">      &quot;eps&quot;: 1e-6</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;activation_checkpointing&quot;: &#123;</span><br><span class="line">    &quot;partition_activations&quot;: false,</span><br><span class="line">    &quot;contiguous_memory_optimization&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;wall_clock_breakdown&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="GFLOPs运算"><a href="#GFLOPs运算" class="headerlink" title="GFLOPs运算"></a>GFLOPs运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"><span class="keyword">from</span> thop <span class="keyword">import</span> profile</span><br><span class="line"><span class="comment"># 创建ResNet-50模型</span></span><br><span class="line">model = models.resnet50()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个随机输入向量，模拟输入图像</span></span><br><span class="line">input_tensor = torch.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用thop的profile函数来统计计算量</span></span><br><span class="line">flops, params = profile(model, inputs=input_tensor,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印计算量信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;FLOPS: <span class="subst">&#123;flops / <span class="number">1e9</span>&#125;</span> GFLOPs&quot;</span>) <span class="comment"># 转换为GFLOPs（十亿次浮点操作）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种方式</span></span><br><span class="line"><span class="comment"># General TFLOPs formula (borrowed from Equation 3 in Section 5.1 of</span></span><br><span class="line"><span class="comment"># https://arxiv.org/pdf/2104.04473.pdf).</span></span><br><span class="line"><span class="comment"># The factor of 4 is when used with activation check-pointing,</span></span><br><span class="line"><span class="comment"># otherwise it will be 3, but for 200B model, activation check-pointing will always be on.</span></span><br><span class="line">checkpoint_activations_factor = <span class="number">4</span> <span class="keyword">if</span> args.checkpoint_activations <span class="keyword">else</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># GLU activations double the hidden states in the upscaling feed-forward in each transformer layer</span></span><br><span class="line"><span class="comment"># This leads to 16bsh^2 instead of 8bsh^2 per first feed-forward layer in MLP, thus we increase the coefficient by 8.</span></span><br><span class="line"><span class="comment"># Refer to https://github.com/bigscience-workshop/Megatron-DeepSpeed/pull/283#issue-1260805063 for more details.</span></span><br><span class="line">coefficient = <span class="number">32</span> <span class="keyword">if</span> args.glu_activation <span class="keyword">else</span> <span class="number">24</span></span><br><span class="line">flops_per_iteration = (coefficient * checkpoint_activations_factor * args.batch_size * args.seq_length * args.num_layers * (args.hidden_size**<span class="number">2</span>)) * (<span class="number">1.</span> + (args.seq_length / (<span class="number">6.</span> * args.hidden_size)) + (args.vocab_size / (<span class="number">16.</span> * args.num_layers * args.hidden_size)))</span><br><span class="line">tflops = flops_per_iteration / (elapsed_time_per_iteration * args.world_size * (<span class="number">10</span>**<span class="number">12</span>))</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash scripts/ds_pretrain_nvidia.sh config/ds_block_large.sh</span><br></pre></td></tr></table></figure><h2 id="计算GPUs平均功率脚本"><a href="#计算GPUs平均功率脚本" class="headerlink" title="计算GPUs平均功率脚本"></a>计算GPUs平均功率脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">times</span>=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">cnt=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">0</span>;i&lt;<span class="variable">$&#123;times&#125;</span>;i++));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  out=`hy-smi -P --csv|<span class="built_in">cut</span> -d<span class="string">&#x27;,&#x27;</span> -f 3`</span><br><span class="line">  IFS=$<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> val <span class="keyword">in</span> <span class="variable">$out</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$val</span> =~ ^[0-9]*\.?[0-9]+$ ]];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$val</span></span><br><span class="line">      <span class="built_in">sum</span>=`<span class="built_in">echo</span> <span class="variable">$sum</span> + <span class="variable">$val</span> | bc`</span><br><span class="line">      ((cnt += <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">sleep</span> 0.5</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cnt</span></span><br><span class="line">ave=`<span class="built_in">echo</span> <span class="string">&quot;scale=2;<span class="variable">$sum</span>/<span class="variable">$cnt</span>&quot;</span> | bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;平均功率为：&quot;</span><span class="variable">$ave</span></span><br></pre></td></tr></table></figure><h2 id="测试参数配置及结果"><a href="#测试参数配置及结果" class="headerlink" title="测试参数配置及结果"></a>测试参数配置及结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">资源配置</th><th style="text-align:center">序列长度</th><th>模型并行参数</th><th>模型精度</th><th>时间（s)</th><th>吞吐率/gpu</th><th>加载时间（s）</th><th>平均功率/gpu（W）</th><th>空载(W)</th><th>实际算力/gpu（GFLOPs）</th><th>线性加速比</th><th>能效</th></tr></thead><tbody><tr><td style="text-align:center">1n8g4b</td><td style="text-align:center">2048</td><td>MP_SIZE=8</td><td>fp16</td><td>29.187</td><td>4/(29.187*8)</td><td>65.96</td><td>79.84</td><td>41.47</td><td></td><td></td><td></td></tr><tr><td style="text-align:center">2n8g4b</td><td style="text-align:center"></td><td></td><td></td><td></td><td>4/(85.453*16)</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">4n8g4b</td><td style="text-align:center"></td><td></td><td></td><td></td><td>4/(74.08*32)</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题Day3</title>
      <link href="/2023/12/02/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day4/"/>
      <url>/2023/12/02/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day4/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><blockquote><p>链表是线性表的链式存储结构，数组是线性表的顺序存储结构，链表可以解决数组的不足</p></blockquote><ol><li>链表由两部分组成，一个是指针域(存放指向下一个节点的指针）、一个是数据域（存放元素）</li><li>链表的每个元素都存储了下一个元素的地址，因此在内存中不是连续的（分配机制取决于操作系统的内存管理）</li><li>相比数组的劣势：<ul><li>无法跳跃式的读取元素，因为你不能知道最后一个元素的内存地址，既只能<code>顺序访问</code></li></ul></li><li>相比数组的优势：<ul><li>只要有足够的内存空间，就能为链表分配内存。而数组就算有足够的内存空间，也不一定能放下，因为数组要求连续的空间。</li></ul></li><li>链表的类型：<ul><li>单链表</li><li>双链表（两个指针域）</li><li>循环链表</li></ul></li></ol><h3 id="常见链表操作"><a href="#常见链表操作" class="headerlink" title="常见链表操作"></a>常见链表操作</h3><ul><li><p>删除节点：只要将C节点的next指针指向E节点就可以，Python会自动回收D节点的内存，C++则需要手动释放这块内存，该操作的时间复杂度是$O(1)$，但是查到D元素的时间复杂度是$O(n)$，因为链表需要顺序访问</p></li><li><p>添加节点：将C指向F，F再指向D，时间复杂度是$O(1)$</p></li><li><p>查找节点：时间复杂度是$O(n)$</p></li></ul><h3 id="链表-vs-数组"><a href="#链表-vs-数组" class="headerlink" title="链表 vs 数组"></a>链表 vs 数组</h3><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:center">数组</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:right">读取</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">$O(n)$</td></tr><tr><td style="text-align:right">插入</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:right">删除</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:right">适用场景</td><td style="text-align:center">数据量固定，频繁查询，较少增删</td><td style="text-align:center">数据量不固定，频繁增删，较少查询</td></tr></tbody></table></div><h3 id="链表的定义（要会写！！）"><a href="#链表的定义（要会写！！）" class="headerlink" title="链表的定义（要会写！！）"></a>链表的定义（要会写！！）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val,<span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">self.val = val <span class="comment">#数据域</span></span><br><span class="line">self.<span class="built_in">next</span> = <span class="built_in">next</span> <span class="comment">#指针域</span></span><br></pre></td></tr></table></figure><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2><ul><li><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">题目链接</a></p><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p>  <strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></li><li><p>题解：1. <strong>链表的删除操作</strong> 2. <strong>头结点和非头节点的处理</strong></p></li><li><p>视频总结：</p><ul><li><p><u><code>平方之后最大元素一定是在两边</code></u>，数组从两边往里慢慢缩小</p></li><li><p>返回新数组，不要求空间复杂度</p></li><li><p>头结点和非头结点的移除元素的操作是不一样的</p><ul><li><p>非头结点：让前一个节点指向后一个节点</p></li><li><p>头结点：直接指向下一个节点，<code>head = head.next</code></p><p>  <img src="/2023/12/02/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day4/20210316095512470-1766403.png" alt="203_链表删除元素4"></p></li><li><p>统一方法（虚拟头结点)：在链表的最前面加入一个dummy head</p><p>  <img src="/2023/12/02/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day4/20210316095619221.png" alt="203_链表删除元素6"></p></li></ul></li></ul></li></ul><ul><li><p>个人思路：</p></li><li><p>难点：</p><ul><li>平方之后最大的元素一定在两边</li><li>想到头尾双指针操作</li></ul></li><li><p>学习时长：40mins</p></li><li><p>LeetCode代码：</p><ul><li><p>第一种解法(头结点和非头结点分开处理)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElements</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], val: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment">#删除头结点，while而不是if的原因是可能有很多个头结点都是1，所以要持续移除</span></span><br><span class="line">        <span class="keyword">while</span> head <span class="keyword">and</span> head.val == val:</span><br><span class="line">        head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="comment">#删除非头结点</span></span><br><span class="line">        <span class="comment">#利用cur指针进行遍历，head指针没有动</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">and</span> cur.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.<span class="built_in">next</span>.val == val:</span><br><span class="line">                cur.<span class="built_in">next</span> = cur.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><hr><p><em>时间复杂度：</em>$O(n)$</p><p><em>空间复杂度：</em>$O(1)$</p></li><li><p>第二种解法(头结点和非头结点一起处理)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure><hr><p><em>时间复杂度：</em>$O(n)$</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组小结</title>
      <link href="/2023/12/01/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day3/"/>
      <url>/2023/12/01/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day3/</url>
      
        <content type="html"><![CDATA[<h1 id="数组小结"><a href="#数组小结" class="headerlink" title="数组小结"></a>数组小结</h1><blockquote><p>数组是存放在连续内存空间上的相同类型数据的集合。</p></blockquote><p><img src="/2023/12/01/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day3/算法通关数组-7920053.png" alt="算法通关数组"></p><ol><li><p>数组的元素在内存中都是<code>相连</code>的，超出空间需要挪动整个数组在内存中的位置，因此：</p><p> a. 需要预留内存空间，如果后期用不上会浪费</p></li><li><p>数组相比链表的优势：</p><p> a. 可以迅速找到数组中的任何元素<code>随机访问</code></p></li></ol><ol><li><p>数组相比链表的劣势：</p><p> a. 插入元素需要将后面的元素都向后移动，如果后面的内存空间被占用，还要将整个数组复制到其他地方</p><p> b. <code>增加</code>和<code>删除</code>元素的时候，难免要移动其他元素的地址</p><p> <img src="/2023/12/01/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day3/算法通关数组1.png" alt="算法通关数组1"></p></li></ol><p>其他：</p><ul><li>数组的元素是不能删的，只能<code>覆盖</code>，也就是删掉元素之后把后面的元素往前移动一位，进行覆盖</li><li>很多涉及到数组删除的库函数，时间复杂度都是$O(n)$，因为要移动元素</li><li>要养成预先定义数组的习惯！</li></ul><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:center">数组</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:right">读取</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">$O(n)$</td></tr><tr><td style="text-align:right">插入</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:right">删除</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(1)$</td></tr><tr><td style="text-align:right">适用场景</td><td style="text-align:center">数据量固定，频繁查询，较少增删</td><td style="text-align:center">数据量不固定，频繁增删，较少查询</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题Day2</title>
      <link href="/2023/11/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day2/"/>
      <url>/2023/11/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day2/</url>
      
        <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。"><a href="#代码随想录算法训练营第二天-977-有序数组的平方、209-长度最小的子数组、59-螺旋矩阵II。" class="headerlink" title="代码随想录算法训练营第二天| 977. 有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。"></a>代码随想录算法训练营第二天| 977. 有序数组的平方、209.长度最小的子数组、59.螺旋矩阵II。</h1><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h2><ul><li><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">题目链接</a></p><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p>  <strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p>  <strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure></li><li><p>题解：1. <strong>有序数组</strong> 2. <strong>平方之后排序</strong></p></li><li><p>视频总结：</p><ul><li><u><code>平方之后最大元素一定是在两边</code></u>，数组从两边往里慢慢缩小</li><li>返回新数组，不要求空间复杂度</li></ul></li><li><p>个人思路：<code>sorted(x*x for x in nums)</code></p></li><li><p>难点：</p><ul><li>平方之后最大的元素一定在两边</li><li>想到头尾双指针操作</li></ul></li><li><p>学习时长：40mins</p></li><li><p>动画：</p></li><li><p><img src="/2023/11/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day2/977.有序数组的平方-20231204154122901.gif" alt="img"></p></li><li><p>LeetCode代码：</p><ul><li><p>第一种解法(暴力排序)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴力解法，先平方，后排序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            nums[i] *= nums[i]</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><hr><p><em>时间复杂度：</em>$O(n+nlogn)$</p></li><li><p>第二种解法(双指针法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        i, j, k = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        res = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * <span class="built_in">len</span>(nums) <span class="comment"># 需要提前定义列表，存放结果</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j : <span class="comment"># i等于j的时候，还有一个元素要计算之后传入新数组，所以不能落下</span></span><br><span class="line">            <span class="keyword">if</span> nums[j] * nums[j] &gt;= nums[i] * nums[i]:</span><br><span class="line">                res[k] = nums[j] * nums[j]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res[k] = nums[i] * nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><p><em>时间复杂度：</em>$O(n)$</p></li></ul></li></ul><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a>209. 长度最小的子数组</h2><ul><li><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">题目链接</a></p><p>  给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>  找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p>  <strong>示例 1：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p>  <strong>示例 2：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>  <strong>示例 3：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure></li><li><p>题解：1. 动态调节大小的滑动窗口（伸缩滑动窗口）</p></li><li><p>视频总结：</p><ul><li>如何用一个for循环做两个for循环的事情 -&gt; “滑动窗口”</li><li>for循环的j指向的是终止位置而非起始位置</li><li>while表示的是一个持续向后移动滑动窗口并且更新窗口大小的过程</li></ul></li><li><p>个人思路：暴力解法（leetcode判题超时）</p></li><li><p>难点：</p><ul><li>滑动窗口“伸出去”、“缩回来”</li></ul></li><li><p>总结：滑动窗口的大小不是固定的，而是通过“伸出去”“缩回来”两个步骤不断更新的动态大小</p></li><li><p>学习时长：30mins</p></li><li><p>LeetCode代码：</p><ul><li><p>暴力解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        min_ = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="comment"># 一个for循环控制起始位置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            cur_sum = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 一个for循环控制终止位置</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(nums)):</span><br><span class="line">                cur_sum += nums[j]</span><br><span class="line">                <span class="keyword">if</span> cur_sum &gt;= target:</span><br><span class="line">                    min_ = <span class="built_in">min</span>(min_, j-i+<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> min_ == <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> min_</span><br></pre></td></tr></table></figure><hr><p><em>时间复杂度：</em>$O(n^2)$ -&gt; 两个嵌套循环</p><p><em>空间复杂度</em>：$O(1)$</p><p><img src="/2023/11/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day2/截屏2023-12-04 16.09.09.png" alt="截屏2023-12-04 16.09.09" style="zoom: 50%;"></p></li><li><p>滑动窗口法：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        min_len = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        cur_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            cur_sum += nums[j]</span><br><span class="line">            <span class="keyword">while</span> cur_sum &gt;= target :</span><br><span class="line">                cur_sum -= nums[i]</span><br><span class="line">                min_len = <span class="built_in">min</span>(min_len, j - i + <span class="number">1</span>)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> min_len == <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> min_len</span><br></pre></td></tr></table></figure><hr><p>  <em>时间复杂度：</em>$O(n)$ -&gt; 不要以为for里放一个while就以为是$O(n^2)$啊， 主要是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 $2 × n$ 也就是$O(n)$。</p><p>  <em>空间复杂度：</em>$O(1)$</p></li></ul></li></ul><h2 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59. 螺旋矩阵II"></a>59. 螺旋矩阵II</h2><ul><li><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">题目链接</a></p><p>  给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p>  <strong>示例 1：</strong></p><p>  <img src="/2023/11/30/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day2/spiraln.jpg" alt="img"></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p>  <strong>示例 2：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure></li><li><p>题解：1. 哪条边的数据就归哪条边处理，不要乱 2. 永远左闭右开</p></li><li><p>视频总结：</p><ul><li>每一条边的处理规则要统一，也就是要坚持循环不变量</li><li>模拟顺时针画矩阵的过程:<ul><li>填充上行从左到右</li><li>填充右列从上到下</li><li>填充下行从右到左</li><li>填充左列从下到上</li></ul></li></ul></li><li><p>个人思路：</p></li><li><p>难点：</p><ul><li>圈数、偏移量、循环不变量</li></ul></li><li><p>总结：循环不变量，处理规则不变很重要</p></li><li><p>学习时长：45mins</p></li><li><p>LeetCode代码：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateMatrix</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        nums = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="comment">#定义初始螺旋数组</span></span><br><span class="line">        startX, startY=<span class="number">0</span>, <span class="number">0</span> <span class="comment">#起始点</span></span><br><span class="line">        offset = <span class="number">1</span> <span class="comment">#偏移量，为了保证圈子循环缩小尺寸</span></span><br><span class="line">        loop = n // <span class="number">2</span> <span class="comment">#很好推理出来，n的数值和圈数的关系</span></span><br><span class="line">        count = <span class="number">1</span> <span class="comment">#从1开始计数</span></span><br><span class="line">        <span class="keyword">while</span> offset &lt;= loop :</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startY, n-offset):</span><br><span class="line">                nums[startX][i] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startX, n-offset):</span><br><span class="line">                nums[i][n-offset] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-offset, startY, -<span class="number">1</span>):</span><br><span class="line">                nums[n-offset][i] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-offset, startX, -<span class="number">1</span>):</span><br><span class="line">                nums[i][startX] = count</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            startX += <span class="number">1</span></span><br><span class="line">            startY += <span class="number">1</span></span><br><span class="line">            offset += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            nums[loop][loop] = count <span class="comment">#n为奇数时，矩阵的中心点</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><hr><p>  <em>时间复杂度：</em>$O(n^2)$ -&gt; n为数组尺寸，模拟遍历二维矩阵的时间</p><p>  <em>空间复杂度：</em>$O(1)$</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题Day1</title>
      <link href="/2023/11/29/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day1/"/>
      <url>/2023/11/29/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="代码随想录算法训练营第一天-704-二分查找、27-移除元素。"><a href="#代码随想录算法训练营第一天-704-二分查找、27-移除元素。" class="headerlink" title="代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素。"></a><strong>代码随想录算法训练营第一天| 704. 二分查找、27. 移除元素</strong>。</h1><h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><blockquote><p><u>使用别人编写的算法时，知道运行时间是很有帮助的！</u></p></blockquote><ol><li>数据规模n，操作单元数f(n)，算法时间增长率和f(n)的增长率相同，这个增长率为O(f(n))，O学术上表示上界，业内一般表示“一般情况”，即数据形式一般的情况。<ul><li>可忽略常数项原因为，通常认为数据量级非常庞大，常数项系数不起决定作用</li><li>大O表示法log可以以任何数字为底，因为<script type="math/tex">log_2^N=log_2^{10}*log_{10}^N</script></li><li>线性时间(linear time)：最多需要猜测的次数与列表长度相同 -&gt; O(n)</li><li>对数时间(log time)：二分查找对应的运行时间为对数时间 -&gt; O(log_n)</li><li>时间排序：指数阶$O(n!)$ &gt; 立方阶$O(n^3)$ &gt; 平方阶$O(n^2)$ &gt; 线性对数阶$O(n*logn)$ &gt; 线性阶$O(n)$ &gt; 对数阶$O(logn)$ &gt; 常数阶$O(C)$</li></ul></li><li>大O表示法的意义在于，通过函数式告诉你运行时间的增速，即随着n增大，时间增长的==幅度==不同<ul><li>大O表示法算出的结果是操作数，n是要处理的元素数量，然后除以每秒可执行的操作得到需要的时间</li><li>大O表示法指出的运行时间是最糟情况下的运行时间，是上限；还有平均情况下的运行时间也要考虑</li></ul></li></ol><p><img src="/2023/11/29/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5Day1/大O表示法.svg" alt="大O表示法"></p><h2 id="数组理论基础"><a href="#数组理论基础" class="headerlink" title="数组理论基础"></a>数组理论基础</h2><ol><li><strong>数组是存放在连续内存空间上的相同类型数据的集合</strong></li><li><strong>数组内存空间的地址是连续的</strong></li><li><strong>数组的元素是不能删的，只能覆盖。</strong></li><li><strong>删除或者增添元素的时候，就难免要移动其他元素的地址。</strong></li></ol><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><ul><li><p><a href="https://leetcode.cn/problems/binary-search/">题目链接</a></p></li><li><p>题解：1. <strong>有序数组</strong> 2. <strong>无重复元素</strong></p></li><li><p>视频总结：</p><ul><li><code>while</code>循环的控制条件符号$&lt;$、$&lt;=$</li><li>边界条件<code>right = middle</code> or <code>right = middle - 1</code></li><li>选择<code>左闭右开</code>或者<code>左闭右闭</code></li></ul></li><li><p>个人思路：全都使用闭合区间，每一次做判断的时候+1或者-1</p></li><li><p>难点：</p><ul><li>区间搜索的时候要明确区间定义：左闭右闭[]还是左闭右开[)？左开右闭比较少见。。</li><li>边界处理，left&lt;right还是left&lt;=right,right=middle还是right=middle-1</li><li>循环中根据区间定义做边界处理，就是循环不变量规则：在while循环中坚持一个区间，区间即不变量</li></ul></li><li><p>学习时长：30mins</p></li><li><p>代码展示(伪代码)：</p><ul><li><p>第一种写法（左闭右闭）</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左闭右闭，合法区间的话left可能等于right</span></span><br><span class="line">left = <span class="number">0</span>, right = numsize - <span class="number">1</span>, target</span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)：</span><br><span class="line">    middle = (left + right)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[middle] &gt; target:</span><br><span class="line">        right = middle - <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> nums[middle] &lt; target:</span><br><span class="line">        left = middle + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> middle</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>  <em>时间复杂度：</em>$O(logn)$ -&gt; 对于包含n个元素的列表，用二分查找最多需要log2_n步，而简单的从头到尾查找需要n步。</p><p>  <em>空间复杂度：</em>$O(1)$</p></li><li><p>第二种写法（左闭右开）</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左闭右开， 合法区间的话left要小于right</span></span><br><span class="line">left = <span class="number">0</span>, right = numsize, target</span><br><span class="line"><span class="keyword">while</span>(left &lt; right)：</span><br><span class="line">    middle = (left + right)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nums[middle] &gt; target:</span><br><span class="line">        right = middle</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> nums[middle] &lt; target:</span><br><span class="line">        left = middle + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> middle</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>  <em>时间复杂度：</em>$O(logn)$ -&gt; 对于包含n个元素的列表，用二分查找最多需要log2_n步，而简单的从头到尾查找需要n步。</p><p>  <em>空间复杂度：</em>$O(1)$</p></li></ul></li><li><p>LeetCode代码：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right):</span><br><span class="line">            middle = (left+right)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target):</span><br><span class="line">                right = middle - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> (nums[middle] &lt; target):</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> middle</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><ul><li><p><a href="https://leetcode.cn/problems/remove-element/">题目链接</a></p></li><li><p>题解：1. <strong>限制O(1)的空间复杂度</strong></p></li><li><p>视频总结：</p><ul><li>数组元素不能删除，只能覆盖，物理内存空间不会发生改变，原来的位置多余出来变成了垃圾</li><li>如果使用库函数可以非常方便的完成解题，则不要使用库函数，除非对库函数内部实现和复杂度很清楚</li><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组；慢指针：指向更新 新数组下标的位置</li></ul></li><li><p>个人思路：暴力解法</p></li><li><p>难点：</p><ul><li>如何用一个for循环完成两个for循环的工作</li></ul></li><li><p>总结：相比于暴力解法来说，双指针解法找的是不等于的情况（找需要的元素）暴力解法找的是等于的情况（找要排除的元素）</p></li><li><p>学习时长：30mins</p></li><li><p>LeetCode代码：</p><ul><li><p>暴力解法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> nums[i] == val:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, j): <span class="comment">#range右边是开区间，因此取不到，所以j=len(nums)而不是len(nums)-1</span></span><br><span class="line">                    nums[k-<span class="number">1</span>] = nums[k] <span class="comment">#后面整体往前移动一位</span></span><br><span class="line">                i -= <span class="number">1</span> <span class="comment">#因为元素被删掉之后，整体往前移动了，当前位置变成了一个新的数，所以还是要从当前位置开始查找，因此这里-1</span></span><br><span class="line">                j -= <span class="number">1</span> <span class="comment">#因为整体往前移动了，所以尾部缩短一位</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><hr><p>  <em>时间复杂度：</em>$O(n^2)$ -&gt; 两个循环，遍历两遍</p><p>  <em>空间复杂度：</em>$O(1)$</p></li><li><p>双指针法：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        slow = fast = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> fast <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[fast] != val:</span><br><span class="line">        nums[slow] = nums[fast]</span><br><span class="line">        slow += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> slow <span class="comment">#slow正好在新数组index+1的位置上，所以就等于新数组的长度</span></span><br></pre></td></tr></table></figure><hr><p>  <em>时间复杂度：</em>$O(n)$ </p><p>  <em>空间复杂度：</em>$O(1)$</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
